# 生产环境 Docker Compose 配置
# 适用于生产环境部署，包含安全配置和性能优化

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: wlweb_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      # 性能优化配置
      MYSQL_INNODB_BUFFER_POOL_SIZE: 2G
      MYSQL_MAX_CONNECTIONS: 200
      MYSQL_QUERY_CACHE_SIZE: 256M
    ports:
      - "127.0.0.1:3306:3306"  # 仅本地访问
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
      - ./logs/mysql:/var/log/mysql
    networks:
      - wlweb_network_prod
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: wlweb_redis_prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "127.0.0.1:6379:6379"  # 仅本地访问
    volumes:
      - redis_data_prod:/data
      - ./logs/redis:/var/log/redis
    networks:
      - wlweb_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      timeout: 10s
      retries: 5
      interval: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # FastAPI后端
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_ENV=production
    image: wlweb/backend:prod
    container_name: wlweb_backend_prod
    restart: unless-stopped
    environment:
      # 数据库配置
      DATABASE_URL: mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      # Redis配置
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      # JWT配置
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      # 应用配置
      DEBUG: false
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      BACKEND_CORS_ORIGINS: ${CORS_ORIGINS}
      # 性能配置
      WORKERS: 4
      MAX_WORKERS: 8
      WORKER_CONNECTIONS: 1000
    ports:
      - "127.0.0.1:8000:8000"  # 仅本地访问
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wlweb_network_prod
    volumes:
      - ./logs/backend:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Vue前端 + Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_BASE_URL=/api
        - BUILD_ENV=production
    image: wlweb/frontend:prod
    container_name: wlweb_frontend_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - wlweb_network_prod
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./static:/usr/share/nginx/html/static:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      timeout: 10s
      retries: 5
      interval: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # 日志收集器（可选）
  logrotate:
    image: alpine:latest
    container_name: wlweb_logrotate_prod
    restart: unless-stopped
    volumes:
      - ./logs:/logs
      - ./scripts/logrotate.sh:/usr/local/bin/logrotate.sh:ro
    command: >
      sh -c "while true; do
        /usr/local/bin/logrotate.sh
        sleep 86400
      done"
    networks:
      - wlweb_network_prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 监控代理（可选）
  monitoring:
    image: prom/node-exporter:latest
    container_name: wlweb_monitoring_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - wlweb_network_prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mysql_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/wlweb/data/mysql
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/wlweb/data/redis

networks:
  wlweb_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: wlweb-prod
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500