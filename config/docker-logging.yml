# Docker容器日志配置
# 用于Docker Compose和Kubernetes环境的日志管理

version: '3.8'

# 日志驱动配置
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,environment"

# 开发环境日志配置
x-logging-dev: &dev-logging
  driver: "json-file"
  options:
    max-size: "50m"
    max-file: "5"
    labels: "service,environment,version"

# 生产环境日志配置
x-logging-prod: &prod-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "10"
    labels: "service,environment,version,node"
    tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

# Fluentd日志配置（用于日志聚合）
x-logging-fluentd: &fluentd-logging
  driver: "fluentd"
  options:
    fluentd-address: "localhost:24224"
    tag: "docker.{{.Name}}"
    fluentd-async-connect: "true"
    fluentd-retry-wait: "1s"
    fluentd-max-retries: "30"

# Syslog日志配置
x-logging-syslog: &syslog-logging
  driver: "syslog"
  options:
    syslog-address: "tcp://localhost:514"
    tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    syslog-facility: "daemon"

# ELK Stack日志配置
x-logging-elk: &elk-logging
  driver: "gelf"
  options:
    gelf-address: "udp://localhost:12201"
    tag: "{{.ImageName}}"
    labels: "service,environment,version"

# 服务特定日志配置
services:
  # MySQL日志配置
  mysql:
    logging:
      <<: *prod-logging
      options:
        max-size: "200m"
        max-file: "15"
        labels: "service=mysql,type=database"
  
  # Redis日志配置
  redis:
    logging:
      <<: *default-logging
      options:
        labels: "service=redis,type=cache"
  
  # FastAPI后端日志配置
  backend:
    logging:
      <<: *prod-logging
      options:
        labels: "service=backend,type=api"
  
  # Vue前端日志配置
  frontend:
    logging:
      <<: *default-logging
      options:
        labels: "service=frontend,type=web"
  
  # Nginx日志配置
  nginx:
    logging:
      <<: *prod-logging
      options:
        max-size: "500m"
        max-file: "20"
        labels: "service=nginx,type=proxy"

# 日志标签配置
labels:
  - "com.wlweb.service={{.Service.Name}}"
  - "com.wlweb.environment=${ENVIRONMENT:-development}"
  - "com.wlweb.version=${VERSION:-latest}"
  - "com.wlweb.node=${NODE_NAME:-unknown}"

# 日志收集器配置
logging_collectors:
  # Fluentd配置
  fluentd:
    image: fluent/fluentd:v1.14-debian-1
    container_name: fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./config/fluentd:/fluentd/etc
      - ./logs:/var/log/fluentd
    environment:
      FLUENTD_CONF: fluent.conf
    logging:
      <<: *default-logging
  
  # Logstash配置
  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "12201:12201/udp"
    volumes:
      - ./config/logstash:/usr/share/logstash/pipeline
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    logging:
      <<: *default-logging
  
  # Filebeat配置
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.5.0
    container_name: filebeat
    user: root
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
    logging:
      <<: *default-logging

# 日志轮转配置
log_rotation:
  # 应用日志轮转
  app_logs:
    path: "/var/log/app/*.log"
    rotate: 30
    daily: true
    compress: true
    delaycompress: true
    missingok: true
    notifempty: true
    create: "644 app app"
  
  # 访问日志轮转
  access_logs:
    path: "/var/log/nginx/*.log"
    rotate: 52
    weekly: true
    compress: true
    delaycompress: true
    missingok: true
    notifempty: true
    create: "644 nginx nginx"
    postrotate: |
      if [ -f /var/run/nginx.pid ]; then
        kill -USR1 `cat /var/run/nginx.pid`
      fi

# 监控和告警配置
monitoring:
  # 日志监控规则
  log_rules:
    - name: "error_rate"
      query: 'rate(log_entries{level="error"}[5m])'
      threshold: 0.1
      duration: "2m"
      action: "alert"
    
    - name: "disk_usage"
      query: 'disk_usage{path="/var/log"}'
      threshold: 0.8
      duration: "1m"
      action: "cleanup"
    
    - name: "log_volume"
      query: 'rate(log_entries[1m])'
      threshold: 1000
      duration: "5m"
      action: "throttle"
  
  # 告警通知
  alerts:
    webhook_url: "${ALERT_WEBHOOK_URL}"
    email_recipients:
      - "admin@wlweb.local"
      - "ops@wlweb.local"
    slack_channel: "#alerts"

# 日志分析配置
analysis:
  # 日志解析规则
  parsers:
    nginx_access:
      pattern: '^(?P<remote_addr>[\d\.]+) - (?P<remote_user>\S+) \[(?P<time_local>[^\]]+)\] "(?P<request>[^"]+)" (?P<status>\d+) (?P<body_bytes_sent>\d+) "(?P<http_referer>[^"]+)" "(?P<http_user_agent>[^"]+)"'
      time_format: "%d/%b/%Y:%H:%M:%S %z"
    
    app_error:
      pattern: '^(?P<timestamp>[\d\-\s\:]+) - (?P<level>\w+) - (?P<message>.*)$'
      time_format: "%Y-%m-%d %H:%M:%S"
  
  # 指标提取
  metrics:
    - name: "response_time"
      source: "nginx_access"
      field: "request_time"
      type: "histogram"
    
    - name: "status_codes"
      source: "nginx_access"
      field: "status"
      type: "counter"
    
    - name: "error_count"
      source: "app_error"
      field: "level"
      type: "counter"
      filter: 'level="ERROR"'

# 环境特定配置
environments:
  development:
    log_level: "DEBUG"
    console_output: true
    file_output: true
    remote_logging: false
  
  staging:
    log_level: "INFO"
    console_output: true
    file_output: true
    remote_logging: true
  
  production:
    log_level: "WARNING"
    console_output: false
    file_output: true
    remote_logging: true
    encryption: true
    retention_days: 90